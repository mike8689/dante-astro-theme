---
import { type CollectionEntry, getCollection } from 'astro:content';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { slugify } from '../../utils/common';
import { sortItemsByDateDesc } from '../../utils/data-utils';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { 
    post: CollectionEntry<'blog'>; 
    prevPost: CollectionEntry<'blog'> | null; 
    nextPost: CollectionEntry<'blog'> | null; 
};

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await post.render();
---

<BaseLayout 
    title={seo?.title ?? title} 
    description={seo?.description ?? excerpt} 
    image={seo?.image} 
    pageType="article" 
    showHeader={false}
>
    <div class="container mx-auto px-4 max-w-4xl">
        <article class="mb-16 sm:mb-24">
            <header class="mb-8 text-center">
                <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
                <div class="mt-4 text-sm text-[var(--text-muted)] flex items-center justify-center gap-2">
                    <FormattedDate date={publishDate} />
                    {updatedDate && (
                        <>
                            <span>•</span>
                            <span>更新于 <FormattedDate date={updatedDate} /></span>
                        </>
                    )}
                </div>
            </header>

            <div class="prose prose-lg mx-auto dark:prose-invert prose-headings:font-serif prose-headings:font-medium prose-a:text-[var(--text-blue)] prose-a:no-underline hover:prose-a:underline">
                <Content />
            </div>

            <footer class="mt-12 pt-6 border-t border-[var(--border-main)]">
                <div class="flex flex-wrap gap-4 items-center justify-between">
                    {tags.length > 0 && (
                        <div class="flex flex-wrap gap-2">
                            {tags.map((tag) => (
                                <a 
                                    href={`/tags/${slugify(tag)}`} 
                                    class="px-3 py-1 text-sm bg-[var(--bg-muted)] text-[var(--text-main)] rounded-full hover:bg-[var(--bg-hover)] transition-colors"
                                >
                                    #{tag}
                                </a>
                            ))}
                        </div>
                    )}
                    <Button 
                        class="copy-url-button"
                        data-url={href}
                    >
                        分享
                    </Button>
                </div>
            </footer>
        </article>

        {(prevPost || nextPost) && (
            <section class="mb-16 sm:mb-24">
                <h2 class="text-2xl font-serif mb-8">相关文章</h2>
                <div class="grid gap-8 sm:grid-cols-2">
                    {prevPost && <PostPreview post={prevPost} headingLevel="h3" />}
                    {nextPost && <PostPreview post={nextPost} headingLevel="h3" />}
                </div>
            </section>
        )}

        <Subscribe class="mb-16 sm:mb-24" />
    </div>
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = '已复制';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
